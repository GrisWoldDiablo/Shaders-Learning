// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.13159265f;

float2 _PixelOffset;
float3 _specular;
int _ReflectionAmount;

float4 _DirectionalLight;
float3 _LightAlbedo;

float _Time;

// RANDOM
uint rng_state;

uint rand_lcg()
{
	// LCG values from Numerical Recipes
	rng_state = 1664525 * rng_state + 1013904223;
	return rng_state;
}

uint rand_xorshift()
{
	// Xorshift algorithm from George Marsaglia's paper
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}
// RANDOM

struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
};

RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = -ray.origin.y / ray.direction.y;
	if (t > 0 && t < bestHit.distance)
	{	
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
	}
}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
	// Calculate distance along the ray where the sphere is intersected
	float3 d = ray.origin - sphere.xyz;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
	if (p2sqr < 0)
	{
		return;
	}

	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.xyz);
	}

}

RayHit Trace(Ray ray, uint XX)
{

	RayHit bestHit = CreateRayHit();
	IntersectGroundPlane(ray,bestHit);
	for (int i = 0; i < 30; i += 4)
	{
		for (int j = 0; j < 30; j += 4)
		{
			// sin(j*_Time/100)+j
			IntersectSphere(ray, bestHit, float4(i,sin(j+_Time)+2,sin(j)*20, 1.3f));
			
		}	
	}
	IntersectSphere(ray, bestHit, float4(5.0f, 10.0f,5.0f, abs(cos(_Time))+1.0f*3.0f));
	return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		
		// Reflect the ray and multiply energy with specular reflection
		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= _specular;
		// Return the normal
		//return hit.normal * 0.5f + 0.5f;
		//return float3(0.0f, 0.0f, 0.0f); // Black return;

		return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * _LightAlbedo;
	}
	else
	{
		// Erase the ray's energy - the sky doesn't reflect anything
		ray.energy = 0.0f;

		// Sample the skybox and write it
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
	}
}



Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// Invert the perspective projection of the vide-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	//Get the dimension of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);

	//Tranform pixel to [-1,1] Range
	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

	//Get a ray for the UVs
	Ray ray = CreateCameraRay(uv);

	// Write some colors
	//Result[id.xy] = float4(ray.direction * 0.5f + 0.5f, 1.0f);

	// Sample the skybox and write it
	//float theta = acos(ray.direction.y) / -PI;
	//float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
	//Result[id.xy] = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);

	//Trace and Shade
	//RayHit hit = Trace(ray);
	//float3 result = Shade(ray, hit);

	float3 result = float3(0, 0, 0);
	for (int i = 0; i < _ReflectionAmount; i++)
	{
		RayHit hit = Trace(ray, id.x);
		result += ray.energy * Shade(ray, hit);
		
		if(!any(ray.energy))
		{
			break;
		}
	}
	Result[id.xy] = float4(result, 1);
}
